#!/bin/sh

# Copyright (C) 2006, 2007, 2008, 2009, 2010  International Business Machines
# and others.
# All Rights Reserved.
# This file is distributed under the Common Public License.
# It is part of the BuildTools project in COIN-OR (www.coin-or.org)
#
## $Id$
#
# Author: Andreas Waechter     IBM      2006-04-14
# Modified: Lou Hafer	       SFU      2010-06-11
#      Mods to allow variations from standard package structure. Decision to
#      process a configure.ac file is based on presence of COIN macros.
#      Directories specified on the command line are recursively searched
#      for configure.ac files. Install-sh signals an independent unit.

# run_autotools takes care of running the autotools (automake, autoconf,
# and helpers) and also makes a few arrangements for when configure and
# libtool execute at configuration, build, and installation.

# The operating assumption is that run_autotools is run in the top level of a
# directory tree, and that directory tree is the top of an independent unit. If
# there is no BuildTools subdirectory present, run_autotools will create
# a link to the directory where it lives, which is assumed to be a BuildTools
# directory somewhere else. The advantage to this approach is that BuildTools
# appears to live in a known location (constant within the directory tree
# of the unit).  This is necessary for proper handling by automake of some
# standard COIN includes in Makefile.am which reference files in BuildTools.
# run_autotools will also copy a number of autotools scripts (required for
# build and installation of any independent unit) from BuildTools into the
# directory where it is run. This, too, is required. The location of these
# files is frozen when automake and autoconf run, and they must move with
# the independent unit because they will be required when configure is run
# and the unit is built and installed.

# Subdirectories are searched for configure.ac files. Autotools will be run
# in these directories if any AC_COIN_ macro is present in the configure.ac
# file. Should it be necessary to fool this script into processing a file that
# otherwise contains no COIN macros, just add a line with AC_COIN_.

# If any subdirectory queued for processing is found to contain an install-sh
# script, it is treated as an independent unit (BuildTools link and script
# copies).

# Make sure we bail out if there is an error
set -e

# Define a cleanup function. We'll set a trap below, just before we start to
# do actual work.

cleanupOnErrorExit ()
{ for link in $topLink $subLink ; do
    echo Trap: removing $link
    rm -f $link
  done
  cd $startDir
}

# Note that vanilla sh doesn't like negative exit values.

# Determine the location of run_autotools.  If there are no '/' chars in
# the command name, we're running in the current directory (almost certainly
# not what's wanted). Otherwise, strip the command name, leaving the prefix.

startDir=`pwd`
if expr "$0" : '.*/.*' >/dev/null 2>&1 ; then
  runautotoolDir=`echo $0 | sed -e 's,\(.*\)/[^/]*,\1,'`
else
  runautotoolDir='.'
fi
runautotoolDir=$startDir/$runautotoolDir
while expr "$runautotoolDir" : '.*/\.\./.*' >/dev/null 2>&1 ; do
  runautotoolDir=`echo $runautotoolDir | sed -e 's,/[^/][^/]*/\.\./,/,'`
done

# Determine the location of BuildTools. If there's a BuildTools subdirectory
# in the current directory, that's it.  Otherwise, assume that runautotooldDir
# is BuildTools. Allow that the user may have linked to a BuildTools.

createLink=0
if test -d BuildTools || test -L BuildTools ; then
  toolsDir=BuildTools
else
  createLink=1
  toolsDir=$runautotoolDir
fi

# Create an absolute path if we don't have one, because we'll be moving
# around. Clean up the path by removing `XXX/..', '/./', '//' sequences.

if expr "$toolsDir" : '/.*' >/dev/null 2>&1 ; then
  :
else
  toolsDir=$startDir/$toolsDir
fi
while expr "$toolsDir" : '.*/\.\./.*' >/dev/null 2>&1 ; do
  toolsDir=`echo $toolsDir | sed -e 's,/[^/][^/]*/\.\./,/,'`
done
toolsDir=`echo $toolsDir | sed -e 's,/\./,/,g' -e 's,//,/,g'`

# Test to be sure that run_autotools is coming from the BuildTools directory.

if test $createLink = 0 && test "$toolsDir" != "$runautotoolDir" ; then
  echo "WARNING: using run_autotools from $runautotoolDir"
  echo "         but BuildTools is $toolsDir."
  echo "         Consider carefully if this is what you wanted to do."
fi

echo "BuildTools directory: $toolsDir"

# coin.m4 should live in the same directory, but this failure is fatal.

if test ! -r $toolsDir/coin.m4 ; then
  echo "Cannot find Coin autotools macro file $toolsDir/coin.m4. It should"
  echo "be in the BuildTools directory."
  exit 1
fi

# As is the failure to find the correct versions of autoconf or automake.

ver_autoconf='2.59'
ver_automake='1.9.6'
ver_libtool='1.5.22'
EGREP='grep -E'

# Check if the correct version of the autotools is used
if test x$AUTOTOOLS_DIR = x; then
  AUTOTOOLS_DIR=$HOME
fi

grep_version=`echo  $ver_autoconf | sed -e 's/\\./\\\\\\./g'`
autoconf --version > confauto.out 2>&1
if $EGREP $grep_version confauto.out >/dev/null 2>&1; then :; else
  echo You are not using the correct version of autoconf
  rm -f confauto.out
  exit 2
fi
rm -f confauto.out
autoconf_dir=`which autoconf | sed -e 's=/autoconf=='`
autoconf_dir=`cd $autoconf_dir; pwd`
if test $autoconf_dir = `cd $AUTOTOOLS_DIR/bin; pwd`; then :; else
  echo autoconf is not picked up from the correct location
  exit 2
fi

grep_version=`echo  $ver_automake | sed -e 's/\\./\\\\\\./g'`
automake --version > confauto.out 2>&1
if $EGREP $grep_version confauto.out >/dev/null 2>&1; then :; else
  echo You are not using the correct version of automake
  rm -f confauto.out
  exit 2
fi
rm -f confauto.out
autoconf_dir=`which automake | sed -e 's=/automake=='`
autoconf_dir=`cd $autoconf_dir; pwd`
if test $autoconf_dir = `cd $AUTOTOOLS_DIR/bin; pwd`; then :; else
  echo automake is not picked up from the correct location
  exit 2
fi

# Failure to find the correct version of libtool isn't fatal here, but
# the user should be warned.

grep_version=`echo  $ver_libtool | sed -e 's/\\./\\\\\\./g'`
ltfile=$AUTOTOOLS_DIR/share/libtool/ltmain.sh
if test -r $ltfile; then :; else
  echo WARNING: Cannot file libtool shell $ltfile
fi
if $EGREP $grep_version $ltfile >/dev/null 2>&1; then :; else
  echo WARNING: You are not using the correct version of libtool
fi

# Set up to process parameters. No parameters is the default.

printHelp=0
doRecurse=1
userSpecifiedDirs=0
dirsToProcess=

# Process the parameters. A parameter without an opening `-' is assumed to be
# a spec for a directory to be processed.

while test $# -gt 0 && test $printHelp = 0 ; do
  case "$1" in
    -h* | --h* )
	 printHelp=1
	 ;;
    -nr* | --no-recursion )
	 doRecurse=0
	 ;;
     -* ) echo "$0: unrecognised command line switch '"$1"'."
	  printHelp=1
	  ;;
      * ) dirsToProcess="$dirsToProcess $1"
	  userSpecifiedDirs=1
	  ;;
  esac
  shift
done

# Help?

if test $printHelp = 1 ; then
  cat <<EOF
usage: run_autotools [-h] [-nr] [ directory directory ... ]

  -h  | --help           print help message and exit
  -nr | --no-recursion   do not do recursive search for configure.ac files

  If no directories are specified, the tree rooted at the current directory
  is searched recursively for directories with configure.ac files containing
  COIN configuration macros (AC_COIN_*) and autotools is run in those
  directories. Directories listed in COIN_SKIP_PROJECTS are skipped.
  If directories are specified on the command line, the search for configure.ac
  files is restricted to the specified directories.

  If directories are specified on the command line *and* --no-recursion is
  given, the specified directories are processed with no checks.
EOF
  exit
fi

# Did the user give directories on the command line? If not, assume the current
# directory.

if test -z "$dirsToProcess" ; then
  dirsToProcess='.'
fi

# If recursion is permitted, find directories which contain a file
# configure.ac. When all is said and done, each entry in dirs will be of the
# form `./path/to/directory'

candDirs=
if test $doRecurse = 1 ; then
  for dir in $dirsToProcess ; do
    tmp=`find $dir -name configure.ac | sed -e s%/configure.ac%%g`
    case "$candDirs" in
      *"$tmp"* )
	  ;;
      * )
	  candDirs="$candDirs $tmp"
	  ;;
      esac
  done
else
  candDirs=$dirsToProcess
fi

# Did the user specify these directories *and* forbid recursion? In that case,
# use the directories exactly as given. If not, winnow the candidates.
# Process a directory only if the configure.ac file contains at least one
# macro that starts with AC_COIN_, and it's not listed in COIN_SKIP_PROJECTS.

if test $userSpecifiedDirs = 1 && test $doRecurse = 0 ; then
  dirs=$candDirs
else
  dirs=
  for dir in $candDirs; do
    if grep AC_COIN_ $dir/configure.ac >/dev/null 2>&1 ; then
      dirs="$dirs $dir"
    else
      echo "  Skipping foreign configure.ac in $dir."
    fi
  done

# Now compare against the skip entries in COIN_SKIP_PROJECTS. To match the
# entries we just collected, add `./' to the front of each skip entry.

  candDirs=$dirs
  if test x${COIN_SKIP_PROJECTS+set} = xset ; then
    dirs=
    for dir in $COIN_SKIP_PROJECTS ; do
      skip_dirs="$skip_dirs ./$dir"
    done
    for dir in $candDirs ; do
      skip=0
      for skipdir in $skip_dirs ; do
	if test $dir = $skipdir ; then
	  skip=1
	  break
	fi
      done
      if test $skip = 0 ; then
	dirs="$dirs $dir"
      else
	echo "  Skipping $dir listed in COIN_SKIP_PROJECTS."
      fi
    done
  fi
fi

# Set a trap so that we'll clean up any links on exit, for whatever reason.
# Note that this executes on normal exit, too, so don't do anything rash.

topLink=
subLink=
trap 'exit_status=$?
  cleanupOnErrorExit
  exit $exit_status' 0

# Get down to business

echo "Running autotools in $dirs"

if test $createLink = 1 ; then
  echo "Creating temporary link for ./BuildTools -> $toolsDir"
  ln -s $toolsDir BuildTools
  topLink="$startDir/BuildTools"
fi

# Copy over files that are used during configure, build, and install. Their
# location will be frozen in files created by automake and autoconf, so they
# must be present in order to move with the directory tree.

autotoolsFiles="config.guess config.sub depcomp install-sh ltmain.sh missing"
echo "Copying autotools scripts into this directory."
for file in $autotoolsFiles ; do
  cp BuildTools/$file .
done

# And now the main event.  Presence of install-sh in a directory is the
# trigger for processing as an independent unit.

echo "Running autotools in $dirs"

m4Files="$AUTOTOOLS_DIR/share/aclocal/libtool.m4 $toolsDir/coin.m4"
for dir in $dirs; do
  if test -r $dir/configure.ac; then
    cd $dir
    tmpBT=0
    echo "Processing $dir ..."
    # Avoid repeat actions for current directory (".")
    if test -f install-sh && test "$dir" != "." ; then
      if test ! -d BuildTools ; then
	ln -s $toolsDir BuildTools
	tmpBT=1
	subLink="`pwd`/BuildTools"
	echo "  creating temporary link for ./BuildTools -> $toolsDir"
      fi
      echo "  refreshing autotools scripts in this directory."
      for file in $autotoolsFiles ; do
        cp BuildTools/$file .
      done
    fi
    echo "  creating acinclude.m4 in $dir"
    cat $m4Files > acinclude.m4
    echo "  running aclocal in $dir"
    if test -d m4; then
      aclocal -I m4 || exit 1
    else
      aclocal || exit 1
    fi
    if grep AC_CONFIG_HEADER configure.ac >/dev/null 2>&1; then
      echo "  running autoheader in $dir"
      autoheader || exit 1
    fi
    echo "  running automake in $dir"
    automake || exit 1
    echo "  running autoconf in $dir"
    autoconf || exit 1
    if test $tmpBT = 1 ; then
      echo "  removing temporary link for ./BuildTools"
      rm BuildTools
      subLink=
    fi
    cd $startDir
  else
    # Serious confusion! Should not reach here.
    echo "*** No configure.ac file in $dir - SKIPPING! ***"
  fi
done

if test $createLink = 1 ; then
  echo "Removing temporary link for ./BuildTools"
  rm BuildTools
  topLink=
fi

